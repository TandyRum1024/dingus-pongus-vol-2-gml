<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum ePONG
{
    none = 0,
    title,
    game,
    results
}

// This is the game state
gameState = ePONG.title;
gameCtr = 0;

// Play area attributes
tableX = room_width / 2;
tableY = room_height / 2;
tableVX = 0;
tableVY = 0;
tableWid = 800;
tableHei = 600;
tableSurf = surface_create(tableWid, tableHei);

// Paddles attributes
paddleMargin = 84;
paddleWid = 32;
paddleLen = 128;

// p1
p1X = paddleMargin;
p1Y = tableHei / 2;
p1Vel = 0;

// p2
p2X = tableWid - paddleMargin;
p2Y = tableHei / 2;
p2Vel = 0;

// Ball
ballX = tableWid / 2;
ballY = tableHei / 2;
ballWid = 32;
ballHei = 32;
ballVX = 0;
ballVY = 0;

// Background attributes
bgColour = c_teal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Heartbeat surface

if (!surface_exists(tableSurf))
    tableSurf = surface_create(tableWid, tableHei);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game logic
gameCtr++;

switch (gameState)
{
    case ePONG.none:
        // Nothing / Attraction
        
        break;
        
    case ePONG.title:
        // Check any key and play
        pong_title_logic();
        break;
    
    case ePONG.game:
        // Time to simulate game
        pong_game_logic();
        break;
}

pong_update_surface();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the PONG
// Draw pong table
var tableHalfW = tableWid / 2;
var tableHalfH = tableHei / 2;
var tableWorldX = tableX - tableHalfW;
var tableWorldY = tableY - tableHalfH;

fast_rect(tableWorldX + 10, tableWorldY + 10, tableWid, tableHei, $140905, 0.5); // shadow
fast_rect(tableWorldX, tableWorldY, tableWid, tableHei, $2E2E30, 1);

// Draw pong game inside of the table
draw_surface(tableSurf, tableWorldX, tableWorldY);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI plz
switch (gameState)
{
    case ePONG.title:
        pong_title_ui();
        break;
        
    case ePONG.game:
        pong_game_ui();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
