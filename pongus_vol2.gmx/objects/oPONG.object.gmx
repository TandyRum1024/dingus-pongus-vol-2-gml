<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum ePONG
{
    none = 0,
    title,
    game,
    results
}

// This is the game state
gameState = ePONG.title;
gameCtr = 0;
gameIntermission = 0; // Some free time counter after scoring a goal or smthn
gameMsg = "DICC CYKA";
p1Score = 0;
p2Score = 0;

superIntense = 0;
intensity = 0;
targetIntensity = 0;
intenseFlash = 0;
boringCtr = 0;


// Camera stuff
camOffX = 0;
camOffY = 0;
camRot = 0;
camVX = 0;
camVY = 0;
camVRot = 0;

// Play area attributes
tableX = room_width / 2;
tableY = room_height / 2;
tableVX = 0;
tableVY = 0;
tableWid = 800;
tableHei = 600;
tableSurf = surface_create(tableWid, tableHei);
tableSurfBlur = surface_create(tableWid, tableHei);
tableSurfFinal = surface_create(tableWid, tableHei);

// Paddles attributes
paddleMargin = 84;
paddleWid = 32;
paddleLen = 150;

enum eANIM
{
    offx = 0,
    offy,
    scalex,
    scaley,
    rot
}
// p1
p1X = paddleMargin;
p1Y = tableHei / 2;
p1Vel = 0;
p1Col = c_creme;
p1Dash = 0; // Dash-able flag
p1DashCtr = 10;
p1LastMove = 0;
// Animation
p1Tremble = 0;
p1Torque = 0;
p1Anim = -1;
p1Anim[eANIM.offx] = 0; p1Anim[eANIM.offy] = 0;
p1Anim[eANIM.scalex] = 1; p1Anim[eANIM.scaley] = 1;
p1Anim[eANIM.rot] = 0;
// p1OffX = 0;
// p1OffY = 0;
// p1ScaleX = 0;
// p1ScaleY = 0;
// p1Angle = 0;

// p2
p2X = tableWid - paddleMargin;
p2Y = tableHei / 2;
p2Vel = 0;
p2Col = c_creme;
p2Dash = 0;
p2DashCtr = 10;
p2LastMove = 0;
// Anim
p2Tremble = 0;
p2Torque = 0;
p2Anim = -1;
p2Anim[eANIM.offx] = 0; p2Anim[eANIM.offy] = 0;
p2Anim[eANIM.scalex] = 1; p2Anim[eANIM.scaley] = 1;
p2Anim[eANIM.rot] = 0;

// Ball
ballX = tableWid / 2;
ballY = tableHei / 2;
ballSize = 32;
ballVX = 0;
ballVY = 0;
ballColliding = false;

// Background attributes
bgColour = c_teal;

// INIT HANGUL
hj_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Heartbeat surface

if (!surface_exists(tableSurf))
    tableSurf = surface_create(tableWid, tableHei);
    
if (!surface_exists(tableSurfFinal))
    tableSurfFinal = surface_create(tableWid, tableHei);
    
if (!surface_exists(tableSurfBlur))
    tableSurfBlur = surface_create(tableWid, tableHei);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game logic
gameCtr++;

switch (gameState)
{
    case ePONG.none:
        // Nothing / Attraction
        
        break;
        
    case ePONG.title:
        // Check any key and play
        pong_title_logic();
        break;
    
    case ePONG.game:
        // Time to simulate game
        pong_game_logic();
        break;
}

// Update torque and anim
pong_update_anim();

pong_update_surface();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the PONG

switch (gameState)
{
    case ePONG.title:
        // Draw BG
        var uBGtime = shader_get_uniform(shd_background_title, "uTime");
        var uStripThicc = shader_get_uniform(shd_background_title, "uStripThicc");
        
        shader_set(shd_background_title);
        shader_set_uniform_f(uBGtime, gameCtr * 0.01);
        shader_set_uniform_f(uStripThicc, sin(gameCtr * 0.01) * 3 + 10);
        
        draw_primitive_begin(pr_trianglefan);
        draw_vertex_texture(0, 0, 0, 0);
        draw_vertex_texture(room_width, 0, 1, 0);
        draw_vertex_texture(room_width, room_height, 1, 1);
        draw_vertex_texture(0, room_height, 0, 1);
        draw_primitive_end();
        shader_reset();
        break;

    case ePONG.game:
        // Draw BG
        var uBGtime = shader_get_uniform(shd_background_game, "uTime");
        var uIntense = shader_get_uniform(shd_background_game, "uIntensity");
        var uFlash = shader_get_uniform(shd_background_game, "uFlash");
        var uSuperIntense = shader_get_uniform(shd_background_game, "uSuperIntense");
        var uStripThicc = shader_get_uniform(shd_background_game, "uStripThicc");
        
        shader_set(shd_background_game);
        shader_set_uniform_f(uBGtime, gameCtr * 0.01);
        shader_set_uniform_f(uIntense, intensity / 10);
        shader_set_uniform_f(uFlash, intenseFlash);
        shader_set_uniform_f(uSuperIntense, superIntense);
        shader_set_uniform_f(uStripThicc, sin(gameCtr * 0.01) * 3 + 7);
        
        draw_primitive_begin(pr_trianglefan);
        draw_vertex_texture(0, 0, 0, 0);
        draw_vertex_texture(room_width, 0, 1, 0);
        draw_vertex_texture(room_width, room_height, 1, 1);
        draw_vertex_texture(0, room_height, 0, 1);
        draw_primitive_end();
        shader_reset();
    
        // Draw pong table
        var tableHalfW = tableWid / 2;
        var tableHalfH = tableHei / 2;
        var tableWorldX = tableX - tableHalfW;
        var tableWorldY = tableY - tableHalfH;
        
        fast_rect(tableWorldX + 10, tableWorldY + 10, tableWid, tableHei, $140905, 0.5); // shadow
        fast_rect(tableWorldX, tableWorldY, tableWid, tableHei, 0, 1);
        
        // Draw pong game inside of the table
        uIntense = shader_get_uniform(shd_pongzone, "uIntensity");
        uBGtime = shader_get_uniform(shd_pongzone, "uTime");
        
        surface_set_target(tableSurfBlur);
        draw_clear_alpha(0,0);
        shader_set(shd_pongzone);
        shader_set_uniform_f(uIntense, intensity / 10);
        shader_set_uniform_f(uBGtime, gameCtr * 0.25);
        draw_surface(tableSurf, 0, 0);
        shader_reset();
        surface_reset_target();
        
        
        
        
        surface_set_target(tableSurfFinal);
        draw_clear_alpha(0,0);
        var uBloom = shader_get_uniform(shd_bloom, "uBloomness");
        var uPixelSize = shader_get_uniform(shd_bloom, "uPixelSize");
        var uH = shader_get_uniform(shd_bloom, "uH");
        var uV = shader_get_uniform(shd_bloom, "uV");
        var uKernel = shader_get_uniform(shd_bloom, "uKernel");
        shader_set(shd_bloom);
        shader_set_uniform_f(uBloom, 1);
        shader_set_uniform_f(uPixelSize, 1 / tableWid, 1 / tableHei);
        shader_set_uniform_f(uH, 1);
        shader_set_uniform_f(uV, 0);
        shader_set_uniform_f(uKernel, 0.382928, 0.241732, 0.060598, 0.005977, 0.000229);
        
        draw_surface(tableSurfBlur, 0, 0);
        shader_reset();
        surface_reset_target();
        
        
        shader_set(shd_bloom);
        shader_set_uniform_f(uH, 0);
        shader_set_uniform_f(uV, 1);
        
        draw_surface(tableSurfFinal, tableWorldX, tableWorldY);
        shader_reset();
        
        //draw_surface(tableSurf, tableWorldX, tableWorldY);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI plz
switch (gameState)
{
    case ePONG.title:
        pong_title_ui();
        break;
        
    case ePONG.game:
        pong_game_ui();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
